Java中的字串特性：
(1) 字串常量與字串池：利用""包括起來的字串，只要不是使用new，內容相同，無論出現多少次，字串池中僅會管理一個實例。
(2) 不可變動(Immutable) 字串：一但建立就無法變更任何內容。

遞迴（Recursion）和迴圈（Loop）是兩種常見的控制流程，它們都可以用於重複執行代碼塊，但它們的實現方式有所不同。

迴圈（Loop）
迴圈是一種控制流結構，通過在滿足特定條件下重複執行代碼塊來實現。
常見的迴圈結構包括 for 迴圈、while 迴圈和 do-while 迴圈。
在迴圈中，通常使用計數器或條件來控制迴圈的終止條件。當終止條件不滿足時，迴圈就會結束。
迴圈的實現方式是在每次迭代時重複執行代碼塊，直到達到終止條件。
遞迴（Recursion）
遞迴是一種自我調用的控制流結構，通過在函數內部調用自身來實現。
遞迴的一個關鍵特徵是它可以將複雜的問題分解為相似但規模較小的子問題，然後解決這些子問題的結果來解決原始問題。
遞迴的終止條件稱為基本情況（Base Case）。當遞迴函數達到基本情況時，遞迴運算將終止，不再自我調用。
遞迴函數的實現方式是通過不斷調用自身，直到達到基本情況為止。
主要差異
迴圈使用迭代（Iteration）的方式來實現循環，而遞迴則是通過自我調用來實現。
遞迴通常用於解決可以被分解為規模較小的相似子問題的問題，而迴圈通常用於需要重複執行相同代碼塊的情況。
遞迴可能會更容易理解和實現一些特定的問題，但它可能會帶來更高的空間和時間複雜度。迴圈則通常更有效率，但在某些情況下，它可能會讓代碼變得複雜或難以理解。
總的來說，選擇使用遞迴還是迴圈取決於問題的特性、性能需求和個人喜好。

遞迴的範例：計算階乘
遞迴的典型示例是計算階乘。階乘是自然數的乘積，例如，5的階乘（5!）等於 5 × 4 × 3 × 2 × 1。

public class Main {
    public static void main(String[] args) {
        int n = 5;
        int result = factorial(n);
        System.out.println(n + "! = " + result);
    }

    public static int factorial(int n) {
        if (n == 0 || n == 1) {
            return 1; // 基本情況：0的階乘和1的階乘都是1
        } else {
            return n * factorial(n - 1); // 遞迴：n的階乘等於n乘以(n-1)的階乘
        }
    }
}
這個範例展示了一個計算階乘的遞迴函數。當 factorial(n) 被調用時，它將計算 n 的階乘，並根據基本情況或遞迴關係遞歸調用自身，直到達到基本情況（n 等於 0 或 1）。

迴圈的範例：計算階乘
這是同樣的階乘計算，但使用迴圈實現。

public class Main {
    public static void main(String[] args) {
        int n = 5;
        int result = factorial(n);
        System.out.println(n + "! = " + result);
    }

    public static int factorial(int n) {
        int result = 1;
        for (int i = 1; i <= n; i++) {
            result *= i; // 將1到n的數相乘
        }
        return result;
    }
}
這個範例展示了使用 for 迴圈計算階乘的方法。迴圈從 1 開始，一直乘到 n 結束，每次迭代將 result 乘以當前的迭代變量 i。

這兩個範例都可以計算 5 的階乘，但它們使用了不同的方法：遞迴和迴圈。

